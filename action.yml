name: "delete-releases-workflows"
author: "ophub"
description: "Delete older releases and workflow runs"

inputs:
  repo:
    description: "Repo name in the form of <owner>/<repo>"
    required: false
    default: "${{ github.repository }}"
  delete_releases:
    description: "Whether to delete releases records"
    required: true
  delete_tags:
    description: "Whether to delete associated tags"
    required: false
    default: "true"
  prerelease_option:
    description: "Whether to differentiate pre-release"
    required: false
    default: "all"
  releases_keep_latest:
    description: "How many latest releases to keep"
    required: false
    default: "90"
  releases_keep_keyword:
    description: "Keyword of the keep releases"
    required: false
    default: ""
  max_releases_fetch:
    description: "Maximum number of releases to fetch in total"
    required: false
    default: "200"
  delete_workflows:
    description: "Whether to delete workflows records"
    required: true
  workflows_keep_latest:
    description: "How many latest workflow runs to keep"
    required: false
    default: "90"
  workflows_keep_keyword:
    description: "Keywords for keep workflows"
    required: false
    default: ""
  max_workflows_fetch:
    description: "Maximum number of workflow runs to fetch in total"
    required: false
    default: "200"
  out_log:
    description: "Output a list log for each step"
    required: false
    default: "false"
  gh_token:
    description: "GitHub token with appropriate permissions"
    required: true
  debug:
    description: "Enable debug output"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Ensure proper jq installation
      shell: bash
      run: |
        # ......
        INFO="[\033[94m 信息 \033[0m]"
        ERROR="[\033[31m ERROR \033[0m]"
        
        # 根据DEBUG变量决定是否静默
        if [ "$DEBUG" != "true" ]; then
          exec >/dev/null 2>&1
        fi

        # 安装jq
        install_jq() {
          echo -e "${INFO} Checking jq installation..."
          if ! command -v jq &>/dev/null; then
            echo -e "${INFO} Installing jq..."
            sudo apt-get -qq update && sudo apt-get -qq install -y jq
          fi
          
          if ! command -v jq &>/dev/null; then
            echo -e "${ERROR} jq installation failed"
            return 1
          fi
          echo -e "${INFO} jq installed at $(which jq)"
          return 0
        }

        # 移除旧版jq并安装新版
        if command -v jq &>/dev/null; then
          echo -e "${INFO} Removing existing jq..."
          sudo snap remove jq 2>/dev/null || true
          sudo apt-get remove -y jq 2>/dev/null || true
        fi

        if ! install_jq; then
          exit 1
        fi
      env:
        DEBIAN_FRONTEND: noninteractive
        DEBUG: ${{ inputs.debug }}

    - name: Validate inputs and run cleanup
      shell: bash
      run: |
        # ......
        ERROR="[\033[31m ERROR \033[0m]"
        INFO="[\033[94m 信息 \033[0m]"
        SUCCESS="[\033[92m SUCCESS \033[0m]"

        # 错误退出函数
        error_msg() {
          echo -e "${ERROR} $1"
          exit 1
        }

        # 切换目录
        cd "${{ github.action_path }}" || {
          error_msg "无法切换到action目录: ${{ github.action_path }}"
        }

        # 清理所有参数的空格或者换行符函数
        get_clean_input() {
          local var="$1"
          echo "$var" | tr -d '[:space:]' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
        }

        # 验证开关有效性函数
        validate_boolean() {
          local var="$1" param_name="$2"
          if [[ ! "$var" =~ ^(true|false)$ ]]; then
            error_msg "参数 $param_name 的值: '$var' 无效，必须是 'true' 或 'false'"
          fi
        }

        # 验证预发布选项函数
        validate_prerelease() {
          local var="$1" param_name="$2"
          if [[ ! "$var" =~ ^(true|false|all)$ ]]; then
            error_msg "参数 $param_name 的值: '$var' 无效，必须是 'true', 'false' 或 'all'"
          fi
        }

        # 验证关键词函数
        validate_keyword() {
          local var="$1" param_name="$2"
          if [[ "$var" =~ ^(true|false)$ ]]; then
            declare -g "$param_name"=""
          fi
        }

        # 验证数字非负和整数函数
        validate_non_negative_integer() {
          local var="$1" param_name="$2" max="${3:-1000}"
          if [[ -z "$var" ]]; then
            error_msg "参数 $param_name 不能为空"
          fi
          if ! [[ "$var" =~ ^[0-9]+$ ]]; then
            error_msg "参数 $param_name 的值: '$var' 无效，必须是非负和整数"
          fi
          if [[ $var -gt $max ]]; then
            error_msg "参数 $param_name 的值: '$var' 无效，最大值是 $max"
          fi
        }

        # 验证github仓库格式正确性
        validate_repo_format() {
          local repo="$1"
          local user_pattern='^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?$'
          local repo_pattern='^[a-zA-Z0-9_]([a-zA-Z0-9_.-]*[a-zA-Z0-9_])?$'
          IFS='/' read -r username reponame <<< "$repo"
          if [[ ${#username} -ge 1 && ${#username} -le 39 && 
                ${#reponame} -ge 1 && ${#reponame} -le 100 && 
                ! "$reponame" =~ \.git$ &&
                "$username" =~ $user_pattern && 
                "$reponame" =~ $repo_pattern ]]; then
            return 0  # 格式正确
          else
            echo -e "${ERROR} 仓库格式错误: $repo"
            return 1  # 格式错误
          fi
        }

        # 获取并清理输入参数
        repo=$(get_clean_input "${{ inputs.repo }}")
        delete_releases=$(get_clean_input "${{ inputs.delete_releases }}")
        delete_tags=$(get_clean_input "${{ inputs.delete_tags }}")
        prerelease_option=$(get_clean_input "${{ inputs.prerelease_option }}")
        releases_keep_latest=$(get_clean_input "${{ inputs.releases_keep_latest }}")
        releases_keep_keyword=$(get_clean_input "${{ inputs.releases_keep_keyword }}")
        max_releases_fetch=$(get_clean_input "${{ inputs.max_releases_fetch }}")
        delete_workflows=$(get_clean_input "${{ inputs.delete_workflows }}")
        workflows_keep_latest=$(get_clean_input "${{ inputs.workflows_keep_latest }}")
        workflows_keep_keyword=$(get_clean_input "${{ inputs.workflows_keep_keyword }}")
        max_workflows_fetch=$(get_clean_input "${{ inputs.max_workflows_fetch }}")
        out_log=$(get_clean_input "${{ inputs.out_log }}")
        gh_token="${{ inputs.gh_token }}"

        # 验证必需参数
        [[ -z "$gh_token" ]] && error_msg "必须提供有效的 GitHub token"
        [[ -z "$delete_releases" ]] && error_msg "必须设置 delete_releases 参数"
        [[ -z "$delete_workflows" ]] && error_msg "必须设置 delete_workflows 参数"

        # 验证仓库格式
        if ! validate_repo_format "$repo"; then
          error_msg "提供的仓库名格式不正确"
        fi

        # 验证参数格式
        validate_boolean "$delete_releases" "delete_releases"
        validate_boolean "$delete_tags" "delete_tags"
        validate_boolean "$delete_workflows" "delete_workflows"
        validate_boolean "$out_log" "out_log"

        验证预发布选项
        validate_prerelease "$prerelease_option" "prerelease_option"

        # 关键词验证
        validate_keyword "$releases_keep_keyword" "releases_keep_keyword"
        validate_keyword "$workflows_keep_keyword" "workflows_keep_keyword"

        # 数字参数验证整数
        validate_non_negative_integer "$releases_keep_latest" "releases_keep_latest"
        validate_non_negative_integer "$workflows_keep_latest" "workflows_keep_latest"
        validate_non_negative_integer "$max_releases_fetch" "max_releases_fetch" 1000
        validate_non_negative_integer "$max_workflows_fetch" "max_workflows_fetch" 1000

        # 验证gh_token有效性
        echo -e "${INFO} 正在验证 GitHub Token..."
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer ${gh_token}" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/user")

        [[ "$response" -ne 200 ]] && error_msg "GitHub Token 验证失败 (HTTP $response)，请检查 Token 是否正确且有足够权限"

        # 构建命令参数
        cmd_args=()
        cmd_args+=(-r "$repo")
        cmd_args+=(-a "$delete_releases")
        cmd_args+=(-t "$delete_tags")
        cmd_args+=(-p "$prerelease_option")
        cmd_args+=(-l "$releases_keep_latest")
        [[ -n "$releases_keep_keyword" ]] && cmd_args+=(-w "$releases_keep_keyword")
        cmd_args+=(-c "$max_releases_fetch")
        cmd_args+=(-s "$delete_workflows")
        cmd_args+=(-d "$workflows_keep_latest")
        [[ -n "$workflows_keep_keyword" ]] && cmd_args+=(-k "$workflows_keep_keyword")
        cmd_args+=(-h "$max_workflows_fetch")
        cmd_args+=(-g "$gh_token")
        cmd_args+=(-o "$out_log")

        # 执行清理脚本
        if [[ ! -f "del.sh" ]]; then
          error_msg "找不到清理脚本 del.sh"
        fi

        chmod +x del.sh
        ./del.sh "${cmd_args[@]}"
