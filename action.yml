name: "delete-releases-workflows"
author: "ophub"
description: "Delete older releases and workflow runs"
inputs:
  repo:
    description: "Repo name in the form of <owner>/<repo>"
    required: false
  delete_releases:
    description: "Whether to delete releases records"
    required: true
    default: "false"
  delete_tags:
    description: "Whether to delete associated tags"
    required: false
    default: "false"
  prerelease_option:
    description: "Whether to differentiate pre-release"
    required: false
    default: "all"
  releases_keep_latest:
    description: "How many latest releases to keep"
    required: false
    default: "90"
  releases_keep_keyword:
    description: "Keyword of the keep releases"
    required: false
    default: ""
  max_releases_fetch:
    description: "Maximum number of releases to fetch in total"
    required: false
    default: "200"
  delete_workflows:
    description: "Whether to delete workflows records"
    required: true
    default: "false"
  workflows_keep_latest:
    description: "How many latest workflow runs to keep"
    required: false
    default: "90"
  workflows_keep_keyword:
    description: "Keywords for keep workflows"
    required: false
    default: ""
  out_log:
    description: "Output a list log for each step"
    required: false
    default: "false"
  gh_token:
    description: "Set the token"
    required: true
  max_workflows_fetch:
    description: "Maximum number of workflow runs to fetch in total"
    required: false
    default: "200"

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        # Use GITHUB_WORKSPACE to get the current workspace directory
        GITHUB_ACTION_PATH="${{ github.action_path }}"
        cd "$GITHUB_ACTION_PATH"

        gh_token="${{ inputs.gh_token }}"
        [[ -z "${gh_token}" ]] && echo -e "Error: Please set the token: [ gh_token ]." && exit 1
        repo="${{ inputs.repo }}"
        [[ -z "${repo}" ]] && repo="${GITHUB_REPOSITORY}"
        out_log="${{ inputs.out_log }}"

        delete_releases="${{ inputs.delete_releases }}"
        [[ -z "${delete_releases}" ]] && echo -e "Error: Please set whether to delete releases." && exit 1
        delete_tags="${{ inputs.delete_tags }}"
        prerelease_option="${{ inputs.prerelease_option }}"
        releases_keep_latest="${{ inputs.releases_keep_latest }}"
        releases_keep_keyword="${{ inputs.releases_keep_keyword }}"
        max_releases_fetch="${{ inputs.max_releases_fetch }}"

        delete_workflows="${{ inputs.delete_workflows }}"
        [[ -z "${delete_workflows}" ]] && echo -e "Error: Please set whether to delete workflows." && exit 1
        workflows_keep_latest="${{ inputs.workflows_keep_latest }}"
        workflows_keep_keyword="${{ inputs.workflows_keep_keyword }}"
        max_workflows_fetch="${{ inputs.max_workflows_fetch }}"

        # Validate boolean inputs
        if [[ ! "$delete_releases" =~ ^(true|false)$ ]]; then
          echo -e "Error: delete_releases must be 'true' or 'false'"
          exit 1
        fi
        if [[ ! "$delete_workflows" =~ ^(true|false)$ ]]; then
          echo -e "Error: delete_workflows must be 'true' or 'false'"
          exit 1
        fi

        make_command=""
        [[ -n "${repo}" ]] && make_command="${make_command} -r ${repo}"
        [[ -n "${delete_releases}" ]] && make_command="${make_command} -a ${delete_releases}"
        [[ -n "${delete_tags}" ]] && make_command="${make_command} -t ${delete_tags}"
        [[ -n "${prerelease_option}" ]] && make_command="${make_command} -p ${prerelease_option}"
        [[ -n "${releases_keep_latest}" ]] && make_command="${make_command} -l ${releases_keep_latest}"
        [[ -n "${releases_keep_keyword}" ]] && make_command="${make_command} -w ${releases_keep_keyword}"
        [[ -n "${max_releases_fetch}" ]] && make_command="${make_command} -c ${max_releases_fetch}"
        [[ -n "${delete_workflows}" ]] && make_command="${make_command} -s ${delete_workflows}"
        [[ -n "${workflows_keep_latest}" ]] && make_command="${make_command} -d ${workflows_keep_latest}"
        [[ -n "${workflows_keep_keyword}" ]] && make_command="${make_command} -k ${workflows_keep_keyword}"
        [[ -n "${max_workflows_fetch}" ]] && make_command="${make_command} -h ${max_workflows_fetch}"
        [[ -n "${gh_token}" ]] && make_command="${make_command} -g ${gh_token}"
        [[ -n "${out_log}" ]] && make_command="${make_command} -o ${out_log}"


        # Ensure the script file exists
        if [[ ! -f "del.sh" ]]; then
          echo -e "Error: del.sh file not found in the current directory."
          exit 1
        fi

        # Make the script executable and run it
        chmod +x del.sh
        ./del.sh ${make_command}

branding:
  icon: "terminal"
  color: "gray-dark"
